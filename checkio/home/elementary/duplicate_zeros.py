"""
–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤ —ç—Ç–æ–π –º–∏—Å—Å–∏–∏ ‚Äì –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å (..., üç©, ... --> ..., üç©, üç©, ...)
–≤—Å–µ –Ω—É–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ (–¥—É–º–∞–π—Ç–µ –æ –ø–æ–Ω—á–∏–∫–∞—Ö ;-P) –∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –≤–∏–¥–µ –ª—é–±–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø—Ä–∏–º–µ—Ä:

[1, 0, 2, 0] -> [1, 0, 0, 2, 0, 0]

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –°–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –°–ø–∏—Å–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç (–∫–æ—Ä—Ç–µ–∂, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏—Ç–µ—Ä–∞—Ç–æ—Ä) –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
"""
from collections.abc import Iterable


def duplicate_zeros(donuts):
    result = []
    for number in donuts:
        result.append(number)
        if number == 0:
            result.append(number)
    # your code here
    return result


print("Example:")
print(list(duplicate_zeros([1, 0, 2, 3, 0, 4, 5, 0])))

# These "asserts" are used for self-checking
assert list(duplicate_zeros([1, 0, 2, 3, 0, 4, 5, 0])) == [
    1,
    0,
    0,
    2,
    3,
    0,
    0,
    4,
    5,
    0,
    0,
]
assert list(duplicate_zeros([0, 0, 0, 0])) == [0, 0, 0, 0, 0, 0, 0, 0]
assert list(duplicate_zeros([100, 10, 0, 101, 1000])) == [100, 10, 0, 0, 101, 1000]

print("The mission is done! Click 'Check Solution' to earn rewards!")
